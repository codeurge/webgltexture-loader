{"version":3,"sources":["../src/ImageURLTextureLoader.js"],"names":["loadImage","src","success","failure","img","window","Image","slice","crossOrigin","onload","onabort","onerror","ImageURLTextureLoader","input","gl","dispose","promise","Promise","then","width","height","texture","createTexture","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","WebGLTextureLoaderAsyncHashCache","globalRegistry","add"],"mappings":";;;;;;;;AACA;;;;;;;;AAKA,SAASA,SAAT,CACEC,GADF,EAEEC,OAFF,EAGEC,OAHF,EAIE;AACA,MAAIC,MAAM,IAAIC,OAAOC,KAAX,EAAV;AACA,MAAIL,IAAIM,KAAJ,CAAU,CAAV,EAAa,CAAb,MAAoB,OAAxB,EAAiC;AAC/BH,QAAII,WAAJ,GAAkB,IAAlB;AACD;AACDJ,MAAIK,MAAJ,GAAa,YAAW;AACtB,QAAIL,GAAJ,EAAS;AACPF,cAAQE,GAAR;AACD;AACDA,UAAM,IAAN;AACD,GALD;AAMAA,MAAIM,OAAJ,GAAcN,IAAIO,OAAJ,GAAcR,OAA5B;AACAC,MAAIH,GAAJ,GAAUA,GAAV;AACA,SAAO,YAAW;AAChB,QAAIG,GAAJ,EAAS;AACPA,UAAIK,MAAJ,GAAa,IAAb;AACAL,UAAIO,OAAJ,GAAc,IAAd;AACAP,UAAIM,OAAJ,GAAc,IAAd;AACAN,UAAIH,GAAJ,GAAU,EAAV;AACAG,YAAM,IAAN;AACD;AACF,GARD;AASD;;IACKQ,qB;;;;;;;;;;;4BACIC,K,EAAY;AAClB,aAAO,OAAOA,KAAP,KAAiB,QAAxB;AACD;;;8BAESA,K,EAAe;AACvB,aAAOA,KAAP;AACD;;;gCAEWZ,G,EAAa;AAAA,UACfa,EADe,GACR,IADQ,CACfA,EADe;;AAEvB,UAAIC,iBAAJ;AACA,UAAMC,UAAU,IAAIC,OAAJ,CACd,UAACf,OAAD,EAAUC,OAAV;AAAA,eAAuBY,WAAUf,UAAUC,GAAV,EAAeC,OAAf,EAAwBC,OAAxB,CAAjC;AAAA,OADc,EAEde,IAFc,CAET,eAAO;AAAA,YACJC,KADI,GACcf,GADd,CACJe,KADI;AAAA,YACGC,MADH,GACchB,GADd,CACGgB,MADH;;AAEZ,YAAMC,UAAUP,GAAGQ,aAAH,EAAhB;AACAR,WAAGS,WAAH,CAAeT,GAAGU,UAAlB,EAA8BH,OAA9B;AACAP,WAAGW,UAAH,CAAcX,GAAGU,UAAjB,EAA6B,CAA7B,EAAgCV,GAAGY,IAAnC,EAAyCZ,GAAGY,IAA5C,EAAkDZ,GAAGa,aAArD,EAAoEvB,GAApE;AACA,eAAO,EAAEiB,gBAAF,EAAWF,YAAX,EAAkBC,cAAlB,EAAP;AACD,OARe,CAAhB;AASA,aAAO,EAAEJ,gBAAF,EAAWD,SAAS;AAAA,iBAAMA,UAAN;AAAA,SAApB,EAAP;AACD;;;;EAtBiCa,oD;;AAyBpCC,mCAAeC,GAAf,CAAmBlB,qBAAnB;;kBAEeA,qB","file":"ImageURLTextureLoader.js","sourcesContent":["//@flow\nimport {\n  globalRegistry,\n  WebGLTextureLoaderAsyncHashCache\n} from \"webgltexture-loader\";\n\nfunction loadImage(\n  src: string,\n  success: (img: Image) => void,\n  failure: (e: Error) => void\n) {\n  let img = new window.Image();\n  if (src.slice(0, 5) !== \"data:\") {\n    img.crossOrigin = true;\n  }\n  img.onload = function() {\n    if (img) {\n      success(img);\n    }\n    img = null;\n  };\n  img.onabort = img.onerror = failure;\n  img.src = src;\n  return function() {\n    if (img) {\n      img.onload = null;\n      img.onerror = null;\n      img.onabort = null;\n      img.src = \"\";\n      img = null;\n    }\n  };\n}\nclass ImageURLTextureLoader extends WebGLTextureLoaderAsyncHashCache<string> {\n  canLoad(input: any) {\n    return typeof input === \"string\";\n  }\n\n  inputHash(input: string) {\n    return input;\n  }\n\n  loadNoCache(src: string) {\n    const { gl } = this;\n    let dispose;\n    const promise = new Promise(\n      (success, failure) => (dispose = loadImage(src, success, failure))\n    ).then(img => {\n      const { width, height } = img;\n      const texture = gl.createTexture();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img);\n      return { texture, width, height };\n    });\n    return { promise, dispose: () => dispose() };\n  }\n}\n\nglobalRegistry.add(ImageURLTextureLoader);\n\nexport default ImageURLTextureLoader;\n"]}
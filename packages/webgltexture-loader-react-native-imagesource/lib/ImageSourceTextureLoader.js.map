{"version":3,"sources":["../src/ImageSourceTextureLoader.js"],"names":["ImageSourceTextureLoader","rngl","gl","getExtension","input","uri","texture","unloadTexture","image","promise","loadTexture","yflip","dispose","WebGLTextureLoaderAsyncHashCache","globalRegistry","add"],"mappings":";;;;;;;;;;AACA;;;;;;;;IAOMA,wB;;;;;;;;;;;;;;0NAGJC,I,GAAO,MAAKC,EAAL,CAAQC,YAAR,CAAqB,IAArB,C;;;;;4BAECC,K,EAAY;AAClB,aACE,OAAOA,KAAP,KAAiB,QAAjB,IACCA,SAAS,QAAOA,KAAP,yCAAOA,KAAP,OAAiB,QAA1B,IAAsC,OAAOA,MAAMC,GAAb,KAAqB,QAF9D;AAID;;;mCAEcC,O,EAAuB;AACpC,WAAKL,IAAL,CAAUM,aAAV,CAAwBD,OAAxB;AACD;;;8BAESF,K,EAAoB;AAC5B,UAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B,OAAOA,KAAP;AAC/B,aAAOA,MAAMC,GAAb;AACD;;;gCAEWG,K,EAAoB;AAC9B,UAAMC,UAAU,KAAKR,IAAL,CAAUS,WAAV,CAAsB,EAAEC,OAAO,IAAT,EAAeH,YAAf,EAAtB,CAAhB;AACA,UAAMI,UAAU,SAAVA,OAAU,GAAM;AACpB;AACD,OAFD;AAGA,aAAO,EAAEH,gBAAF,EAAWG,gBAAX,EAAP;AACD;;;;EA3BoCC,oD;;AA8BvCC,mCAAeC,GAAf,CAAmBf,wBAAnB;;kBAEeA,wB","file":"ImageSourceTextureLoader.js","sourcesContent":["//@flow\nimport {\n  globalRegistry,\n  WebGLTextureLoaderAsyncHashCache\n} from \"webgltexture-loader\";\n\ntype ImageSource = Object | number;\n\nclass ImageSourceTextureLoader extends WebGLTextureLoaderAsyncHashCache<\n  ImageSource\n> {\n  rngl = this.gl.getExtension(\"RN\");\n\n  canLoad(input: any) {\n    return (\n      typeof input === \"number\" ||\n      (input && typeof input === \"object\" && typeof input.uri === \"string\")\n    );\n  }\n\n  disposeTexture(texture: WebGLTexture) {\n    this.rngl.unloadTexture(texture);\n  }\n\n  inputHash(input: ImageSource) {\n    if (typeof input === \"number\") return input;\n    return input.uri;\n  }\n\n  loadNoCache(image: ImageSource) {\n    const promise = this.rngl.loadTexture({ yflip: true, image });\n    const dispose = () => {\n      // FIXME not sure what we can do for now\n    };\n    return { promise, dispose };\n  }\n}\n\nglobalRegistry.add(ImageSourceTextureLoader);\n\nexport default ImageSourceTextureLoader;\n"]}
{"version":3,"sources":["../src/ConfigTextureLoader.js"],"names":["ConfigTextureLoader","rngl","gl","getExtension","input","texture","unloadTexture","config","JSON","stringify","promise","loadTexture","dispose","WebGLTextureLoaderAsyncHashCache","priority","globalRegistry","add"],"mappings":";;;;;;;;;;AACA;;;;;;;;IAOMA,mB;;;;;;;;;;;;;;gNAGJC,I,GAAO,MAAKC,EAAL,CAAQC,YAAR,CAAqB,IAArB,C;IAFiB;;;;4BAIhBC,K,EAAY;AAClB,aAAO,QAAOA,KAAP,yCAAOA,KAAP,OAAiB,QAAxB,CADkB,CACgB;AACnC;;;mCAEcC,O,EAAuB;AACpC,WAAKJ,IAAL,CAAUK,aAAV,CAAwBD,OAAxB;AACD;;;8BAESE,M,EAAgB;AACxB;AACA,aAAOC,KAAKC,SAAL,CAAeF,MAAf,CAAP;AACD;;;gCAEWA,M,EAAgB;AAC1B,UAAMG,UAAU,KAAKT,IAAL,CAAUU,WAAV,CAAsBJ,MAAtB,CAAhB;AACA,UAAMK,UAAU,SAAVA,OAAU,GAAM;AACpB;AACD,OAFD;AAGA,aAAO,EAAEF,gBAAF,EAAWE,gBAAX,EAAP;AACD;;;;EAxB+BC,oD;;AAA5Bb,mB,CACGc,Q,GAAW,CAAC,G;;;AA0BrBC,mCAAeC,GAAf,CAAmBhB,mBAAnB;;kBAEeA,mB","file":"ConfigTextureLoader.js","sourcesContent":["//@flow\nimport {\n  globalRegistry,\n  WebGLTextureLoaderAsyncHashCache\n} from \"webgltexture-loader\";\n\ntype Config = Object;\n\nclass ConfigTextureLoader extends WebGLTextureLoaderAsyncHashCache<Config> {\n  static priority = -100; // this loader accept any config object, so we need a low priority to make this a \"last loader\" fallback. we might later improve the granularity (making this paradigm first citizen in react-native-webgl?)\n\n  rngl = this.gl.getExtension(\"RN\");\n\n  canLoad(input: any) {\n    return typeof input === \"object\"; // technically any config object is possible, so we'll make sure to use a low priority\n  }\n\n  disposeTexture(texture: WebGLTexture) {\n    this.rngl.unloadTexture(texture);\n  }\n\n  inputHash(config: Config) {\n    // JSON.stringify is a quick way to hash the config object\n    return JSON.stringify(config);\n  }\n\n  loadNoCache(config: Config) {\n    const promise = this.rngl.loadTexture(config);\n    const dispose = () => {\n      // FIXME not sure what we can do for now\n    };\n    return { promise, dispose };\n  }\n}\n\nglobalRegistry.add(ConfigTextureLoader);\n\nexport default ConfigTextureLoader;\n"]}
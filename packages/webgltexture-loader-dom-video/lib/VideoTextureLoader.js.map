{"version":3,"sources":["../src/VideoTextureLoader.js"],"names":["VideoTextureLoader","input","HTMLVideoElement","gl","width","height","timeout","dispose","clearTimeout","promise","Promise","resolve","reject","checkVideoReady","videoWidth","texture","createTexture","videoHeight","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","setTimeout","res","get","WebGLTextureLoaderAsyncHashCache","globalRegistry","add"],"mappings":";;;;;;;;AACA;;;;;;;;IAKMA,kB;;;;;;;;;;;4BAGIC,K,EAAY;AAClB,aAAOA,iBAAiBC,gBAAxB;AACD;;;8BAESD,K,EAAyB;AACjC,aAAOA,KAAP;AACD;;;gCAEWA,K,EAAyB;AAAA,UAC3BE,EAD2B,GACpB,IADoB,CAC3BA,EAD2B;AAAA,UAE3BC,KAF2B,GAETH,KAFS,CAE3BG,KAF2B;AAAA,UAEpBC,MAFoB,GAETJ,KAFS,CAEpBI,MAFoB;;;AAInC,UAAIC,gBAAJ;AACA,UAAMC,UAAU,SAAVA,OAAU,GAAM;AACpBC,qBAAaF,OAAb;AACD,OAFD;;AAIA,UAAMG,UAAU,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/C,YAAMC,kBAAkB,SAAlBA,eAAkB,GAAM;AAC5B,cAAIZ,MAAMa,UAAN,GAAmB,CAAvB,EAA0B;AACxB,gBAAMC,UAAUZ,GAAGa,aAAH,EAAhB;AADwB,gBAEJZ,MAFI,GAE2BH,KAF3B,CAEhBa,UAFgB;AAAA,gBAEgBT,OAFhB,GAE2BJ,KAF3B,CAEGgB,WAFH;;AAGxBd,eAAGe,WAAH,CAAef,GAAGgB,UAAlB,EAA8BJ,OAA9B;AACAZ,eAAGiB,UAAH,CACEjB,GAAGgB,UADL,EAEE,CAFF,EAGEhB,GAAGkB,IAHL,EAIElB,GAAGkB,IAJL,EAKElB,GAAGmB,aALL,EAMErB,KANF;AAQAU,oBAAQ;AACNI,8BADM;AAENX,2BAFM;AAGNC;AAHM,aAAR;AAKD,WAjBD,MAiBO;AACLC,sBAAUiB,WAAWV,eAAX,EAA4B,GAA5B,CAAV;AACD;AACF,SArBD;AAsBAA;AACD,OAxBe,CAAhB;;AA0BA,aAAO,EAAEN,gBAAF,EAAWE,gBAAX,EAAP;AACD;;;2BAEMR,K,EAAyB;AAAA,UACtBE,EADsB,GACf,IADe,CACtBA,EADsB;;AAE9B,UAAMqB,MAAM,KAAKC,GAAL,CAASxB,KAAT,CAAZ;AACA,UAAI,CAACuB,GAAL,EAAU;AACVrB,SAAGe,WAAH,CAAef,GAAGgB,UAAlB,EAA8BK,IAAIT,OAAlC;AACAZ,SAAGiB,UAAH,CAAcjB,GAAGgB,UAAjB,EAA6B,CAA7B,EAAgChB,GAAGkB,IAAnC,EAAyClB,GAAGkB,IAA5C,EAAkDlB,GAAGmB,aAArD,EAAoErB,KAApE;AACD;;;;EAvD8ByB,oD;;AA0DjCC,mCAAeC,GAAf,CAAmB5B,kBAAnB;;kBAEeA,kB","file":"VideoTextureLoader.js","sourcesContent":["//@flow\nimport {\n  WebGLTextureLoaderAsyncHashCache,\n  globalRegistry\n} from \"webgltexture-loader\";\n\nclass VideoTextureLoader extends WebGLTextureLoaderAsyncHashCache<\n  HTMLVideoElement\n> {\n  canLoad(input: any) {\n    return input instanceof HTMLVideoElement;\n  }\n\n  inputHash(input: HTMLVideoElement) {\n    return input;\n  }\n\n  loadNoCache(input: HTMLVideoElement) {\n    const { gl } = this;\n    const { width, height } = input;\n\n    let timeout;\n    const dispose = () => {\n      clearTimeout(timeout);\n    };\n\n    const promise = new Promise((resolve, reject) => {\n      const checkVideoReady = () => {\n        if (input.videoWidth > 0) {\n          const texture = gl.createTexture();\n          const { videoWidth: width, videoHeight: height } = input;\n          gl.bindTexture(gl.TEXTURE_2D, texture);\n          gl.texImage2D(\n            gl.TEXTURE_2D,\n            0,\n            gl.RGBA,\n            gl.RGBA,\n            gl.UNSIGNED_BYTE,\n            input\n          );\n          resolve({\n            texture,\n            width,\n            height\n          });\n        } else {\n          timeout = setTimeout(checkVideoReady, 100);\n        }\n      };\n      checkVideoReady();\n    });\n\n    return { dispose, promise };\n  }\n\n  update(input: HTMLVideoElement) {\n    const { gl } = this;\n    const res = this.get(input);\n    if (!res) return;\n    gl.bindTexture(gl.TEXTURE_2D, res.texture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, input);\n  }\n}\n\nglobalRegistry.add(VideoTextureLoader);\n\nexport default VideoTextureLoader;\n"]}